%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!29 &1
OcclusionCullingSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 2
  m_OcclusionBakeSettings:
    smallestOccluder: 5
    smallestHole: 0.25
    backfaceThreshold: 100
  m_SceneGUID: 00000000000000000000000000000000
  m_OcclusionCullingData: {fileID: 0}
--- !u!104 &2
RenderSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 9
  m_Fog: 0
  m_FogColor: {r: 0.5, g: 0.5, b: 0.5, a: 1}
  m_FogMode: 3
  m_FogDensity: 0.01
  m_LinearFogStart: 0
  m_LinearFogEnd: 300
  m_AmbientSkyColor: {r: 0.212, g: 0.227, b: 0.259, a: 1}
  m_AmbientEquatorColor: {r: 0.114, g: 0.125, b: 0.133, a: 1}
  m_AmbientGroundColor: {r: 0.047, g: 0.043, b: 0.035, a: 1}
  m_AmbientIntensity: 1
  m_AmbientMode: 0
  m_SubtractiveShadowColor: {r: 0.42, g: 0.478, b: 0.627, a: 1}
  m_SkyboxMaterial: {fileID: 10304, guid: 0000000000000000f000000000000000, type: 0}
  m_HaloStrength: 0.5
  m_FlareStrength: 1
  m_FlareFadeSpeed: 3
  m_HaloTexture: {fileID: 0}
  m_SpotCookie: {fileID: 10001, guid: 0000000000000000e000000000000000, type: 0}
  m_DefaultReflectionMode: 0
  m_DefaultReflectionResolution: 128
  m_ReflectionBounces: 1
  m_ReflectionIntensity: 1
  m_CustomReflection: {fileID: 0}
  m_Sun: {fileID: 0}
  m_UseRadianceAmbientProbe: 0
--- !u!157 &3
LightmapSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 12
  m_GIWorkflowMode: 1
  m_GISettings:
    serializedVersion: 2
    m_BounceScale: 1
    m_IndirectOutputScale: 1
    m_AlbedoBoost: 1
    m_EnvironmentLightingMode: 0
    m_EnableBakedLightmaps: 1
    m_EnableRealtimeLightmaps: 0
  m_LightmapEditorSettings:
    serializedVersion: 12
    m_Resolution: 2
    m_BakeResolution: 40
    m_AtlasSize: 1024
    m_AO: 0
    m_AOMaxDistance: 1
    m_CompAOExponent: 1
    m_CompAOExponentDirect: 0
    m_ExtractAmbientOcclusion: 0
    m_Padding: 2
    m_LightmapParameters: {fileID: 0}
    m_LightmapsBakeMode: 1
    m_TextureCompression: 1
    m_FinalGather: 0
    m_FinalGatherFiltering: 1
    m_FinalGatherRayCount: 256
    m_ReflectionCompression: 2
    m_MixedBakeMode: 2
    m_BakeBackend: 1
    m_PVRSampling: 1
    m_PVRDirectSampleCount: 32
    m_PVRSampleCount: 512
    m_PVRBounces: 2
    m_PVREnvironmentSampleCount: 256
    m_PVREnvironmentReferencePointCount: 2048
    m_PVRFilteringMode: 1
    m_PVRDenoiserTypeDirect: 1
    m_PVRDenoiserTypeIndirect: 1
    m_PVRDenoiserTypeAO: 1
    m_PVRFilterTypeDirect: 0
    m_PVRFilterTypeIndirect: 0
    m_PVRFilterTypeAO: 0
    m_PVREnvironmentMIS: 1
    m_PVRCulling: 1
    m_PVRFilteringGaussRadiusDirect: 1
    m_PVRFilteringGaussRadiusIndirect: 5
    m_PVRFilteringGaussRadiusAO: 2
    m_PVRFilteringAtrousPositionSigmaDirect: 0.5
    m_PVRFilteringAtrousPositionSigmaIndirect: 2
    m_PVRFilteringAtrousPositionSigmaAO: 1
    m_ExportTrainingData: 0
    m_TrainingDataDestination: TrainingData
    m_LightProbeSampleCountMultiplier: 4
  m_LightingDataAsset: {fileID: 0}
  m_LightingSettings: {fileID: 0}
--- !u!196 &4
NavMeshSettings:
  serializedVersion: 2
  m_ObjectHideFlags: 0
  m_BuildSettings:
    serializedVersion: 3
    agentTypeID: 0
    agentRadius: 0.5
    agentHeight: 2
    agentSlope: 45
    agentClimb: 0.4
    ledgeDropHeight: 0
    maxJumpAcrossDistance: 0
    minRegionArea: 2
    manualCellSize: 0
    cellSize: 0.16666667
    manualTileSize: 0
    tileSize: 256
    buildHeightMesh: 0
    maxJobWorkers: 0
    preserveTilesOutsideBounds: 0
    debug:
      m_Flags: 0
  m_NavMeshData: {fileID: 0}
--- !u!1 &515958037
GameObject:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  serializedVersion: 6
  m_Component:
  - component: {fileID: 515958038}
  - component: {fileID: 515958039}
  m_Layer: 0
  m_Name: Gpt Manager
  m_TagString: Untagged
  m_Icon: {fileID: 0}
  m_NavMeshLayer: 0
  m_StaticEditorFlags: 0
  m_IsActive: 1
--- !u!4 &515958038
Transform:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 515958037}
  serializedVersion: 2
  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
  m_LocalPosition: {x: 0, y: 0, z: 0}
  m_LocalScale: {x: 1, y: 1, z: 1}
  m_ConstrainProportionsScale: 0
  m_Children: []
  m_Father: {fileID: 0}
  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
--- !u!114 &515958039
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 515958037}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 647495847d584384ebf4002b567393ed, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  apiUrl: https://api.vveai.com/v1/chat/completions/
  apiKey: sk-8VlcEN66R8X97AGw40D57f81C3Ca4eB280C929740677A30f
  currentModel: gpt-4o
  prompt: "  \u76EE\u524D\u6B63\u5728\u8FDB\u884C\u5730\u5F62\u751F\u6210\u7CFB\u7EDF\u7684\u53C2\u6570\u751F\u6210\u73AF\u8282\uFF0C\u9700\u8981\u4F60\u6839\u636ETerrainDataSo\u7684\u4EE3\u7801\u4E0E\u9884\u8BBE\u7684\u4E3B\u9898\u63D0\u793A\u7ED9\u51FA\u5177\u4F53\u7684\u53C2\u6570\uFF0C\u76F8\u5173\u7684\u4EE3\u7801\u89C1\u4E0B\u6587\u3002\r\n 
    \u8981\u6C42\uFF1A\r\n\u4E0D\u8981\u6709\u591A\u4F59\u7684\u8F93\u51FA\uFF0C\u76EE\u524D\u7684\u5730\u5F62\u751F\u6210\u4EE3\u7801\u5982\u4E0B\uFF1A\u201C\r\nusing
    System.Collections.Generic;\r\nusing UnityEngine;\r\nusing Random = UnityEngine.Random;\r\n\r\npublic
    class TerrainGenerator : MonoBehaviour\r\n{\r\n    [Tooltip(\"\u5730\u5F62\u914D\u7F6E\u6570\u636E\")]\r\n   
    public TerrainDataSo terrainDataSo;\r\n\r\n    private void Update()\r\n    {\r\n       
    if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            Debug.Log(\"Start
    Generate\");\r\n            GenerateTerrain();\r\n        }\r\n    }\r\n    \r\n   
    private void SetResolution(TerrainData terrainData)\r\n    {\r\n        // \u4ECE
    ScriptableObject \u8BFB\u53D6\u5206\u8FA8\u7387\u548C\u5C3A\u5BF8\r\n       
    terrainData.heightmapResolution = terrainDataSo.heightmapResolution;\r\n       
    terrainData.alphamapResolution = terrainDataSo.alphamapResolution;\r\n       
    terrainData.SetDetailResolution(terrainDataSo.alphamapResolution, terrainDataSo.detailResolution);\r\n       
    terrainData.size = terrainDataSo.dataSize;\r\n    }\r\n    \r\n    private void
    SetHeight(TerrainData terrainData)\r\n    {\r\n        var heights = GenerateTerrainNoise(\r\n           
    terrainDataSo.heightmapResolution,\r\n            terrainDataSo.heightmapResolution,\r\n           
    terrainDataSo\r\n        );\r\n        terrainData.SetHeights(0, 0, heights);\r\n   
    }\r\n    private float[,] GenerateTerrainNoise(int width, int height, TerrainDataSo
    data)\r\n    {\r\n        float[,] heights = new float[width, height];\r\n\r\n       
    for (int y = 0; y < height; y++)\r\n        {\r\n            for (int x = 0;
    x < width; x++)\r\n            {\r\n                float finalNoise = 0f;\r\n               
    foreach (NoiseLayer layer in data.noiseLayers)\r\n                {\r\n                   
    if (layer.enabled)\r\n                    {\r\n                        finalNoise
    += layer.Evaluate(x, y);\r\n                        finalNoise = Mathf.Clamp(finalNoise,
    0f, 1f);//\u5F52\u4E00\u5316\r\n                    }\r\n                }\r\n               
    heights[x, y] = finalNoise;\r\n            }\r\n        }\r\n        \r\n       
    return heights;\r\n    }\r\n\r\n\r\n    // \u8BBE\u7F6E\u5730\u5F62\u7EB9\u7406\r\n   
    // terrainData.terrainLayers\uFF1A\u63A7\u5236\u5730\u5F62\u7684\u7EB9\u7406\u5C42\u3002\r\n   
    // terrainData.alphamapResolution\uFF1A\u63A7\u5236\u6DF7\u5408\u7EB9\u7406\u8D34\u56FE\u7684\u5206\u8FA8\u7387\u3002\r\n   
    // terrainData.GetAlphamaps(x, y, width, height)\uFF1A\u83B7\u53D6\u7EB9\u7406\u6DF7\u5408\u6570\u636E\u3002\r\n   
    // terrainData.SetAlphamaps(x, y, alphaMaps)\uFF1A\u8BBE\u7F6E\u7EB9\u7406\u6DF7\u5408\u6570\u636E\r\n   
    private void SetLayers(TerrainData terrainData)\r\n    {\r\n        int layerCount
    = terrainDataSo.textureLayers.Length;\r\n        TerrainLayer[] layers = new
    TerrainLayer[layerCount];\r\n\r\n        for (int i = 0; i < layerCount; i++)\r\n       
    {\r\n            TerrainTextureLayer soLayer = terrainDataSo.textureLayers[i];\r\n           
    TerrainLayer layer = new TerrainLayer\r\n            {\r\n                diffuseTexture
    = soLayer.diffuseTexture,\r\n                tileSize = soLayer.tileSize\r\n           
    };\r\n            layers[i] = layer;\r\n        }\r\n\r\n        terrainData.terrainLayers
    = layers;\r\n\r\n        int resolution = terrainData.alphamapResolution;\r\n       
    float[,,] alphaMaps = new float[resolution, resolution, layerCount];\r\n\r\n       
    float[,] heights = terrainData.GetHeights(0, 0, resolution, resolution);\r\n\r\n       
    for (int y = 0; y < resolution; y++)\r\n        {\r\n            for (int x =
    0; x < resolution; x++)\r\n            {\r\n                float height = heights[y,
    x];\r\n                float totalWeight = 0;\r\n\r\n                for (int
    layer = 0; layer < layerCount; layer++)\r\n                {\r\n                   
    TerrainTextureLayer currentLayer = terrainDataSo.textureLayers[layer];\r\n                   
    float weight = 0;\r\n\r\n                    // \u57FA\u4E8E\u9AD8\u5EA6\u5206\u5E03\r\n                   
    if (height >= currentLayer.minHeight && height <= currentLayer.maxHeight)\r\n                   
    {\r\n                        weight = Mathf.InverseLerp(currentLayer.minHeight,
    currentLayer.maxHeight, height);\r\n                    }\r\n\r\n                   
    // \u7ED3\u5408\u659C\u7387\u5206\u5E03\uFF08\u5982\u679C\u9700\u8981\uFF09\r\n                   
    float slope = CalculateSlope(terrainData, x, y);\r\n                    if (slope
    >= currentLayer.minSlope && slope <= currentLayer.maxSlope)\r\n                   
    {\r\n                        weight *= Mathf.InverseLerp(currentLayer.minSlope,
    currentLayer.maxSlope, slope);\r\n                    }\r\n\r\n                   
    // \u52A0\u5165\u566A\u58F0\u63A7\u5236\r\n                    if (currentLayer.useNoise)\r\n                   
    {\r\n                        float noise = Mathf.PerlinNoise(x * currentLayer.noiseScale,
    y * currentLayer.noiseScale);\r\n                        weight *= noise;\r\n                   
    }\r\n\r\n                    // \u5E94\u7528 minBlend \u548C maxBlend \u9650\u5236\r\n                   
    float clampedWeight = Mathf.Clamp(weight, currentLayer.minBlend, currentLayer.maxBlend);\r\n                   
    alphaMaps[y, x, layer] = clampedWeight;\r\n                    totalWeight +=
    clampedWeight;\r\n                }\r\n                \r\n                //
    \u5F52\u4E00\u5316\u6743\u91CD\r\n                for (int layer = 0; layer <
    layerCount; layer++)\r\n                {\r\n                    alphaMaps[y,
    x, layer] /= totalWeight > 0 ? totalWeight : 1;\r\n                }\r\n           
    }\r\n        }\r\n        terrainData.SetAlphamaps(0, 0, alphaMaps);\r\n    }\r\n\r\n   
    // \u8BA1\u7B97\u659C\u7387\uFF08\u89D2\u5EA6\uFF09\r\n    private float CalculateSlope(TerrainData
    terrainData, int x, int y)\r\n    {\r\n        Vector3 normal = terrainData.GetInterpolatedNormal((float)x
    / terrainData.alphamapResolution, (float)y / terrainData.alphamapResolution);\r\n       
    return Vector3.Angle(normal, Vector3.up);\r\n    }\r\n\r\n\r\n\r\n    private
    void SetPlants(TerrainData terrainData)\r\n    {\r\n        List<TreePrototype>
    treePrototypes = new List<TreePrototype>();\r\n        foreach (var plant in
    terrainDataSo.plants)\r\n        {\r\n            TreePrototype prototype = new
    TreePrototype\r\n            {\r\n                prefab = plant.prefab  // \u4F7F\u7528\u690D\u7269\u7684\u9884\u8BBE\r\n           
    };\r\n            treePrototypes.Add(prototype);\r\n        }\r\n        terrainData.treePrototypes
    = treePrototypes.ToArray();\r\n\r\n        List<TreeInstance> treeInstances =
    new List<TreeInstance>();\r\n\r\n        // \u4E3A\u6BCF\u79CD\u690D\u7269\u751F\u6210\u5B9E\u4F8B\r\n       
    for (int p = 0; p < terrainDataSo.plants.Length; p++)\r\n        {\r\n           
    Plant plant = terrainDataSo.plants[p];\r\n\r\n            // \u904D\u5386\u6BCF\u4E2A\u5706\u5F62\u533A\u57DF\r\n           
    foreach (var area in plant.area)\r\n            {\r\n                Vector2
    center = new Vector2(area.x, area.y);  // \u5706\u5FC3\u5750\u6807\r\n               
    float radius = area.z;                         // \u534A\u5F84\r\n\r\n               
    int areaCount = Mathf.FloorToInt(terrainData.size.x * terrainData.size.z * plant.density
    * 0.01f);\r\n\r\n                for (int i = 0; i < areaCount; i++)\r\n               
    {\r\n                    // \u968F\u673A\u751F\u6210\u70B9\u7684 x \u548C z \u5750\u6807\r\n                   
    float normalizedX = Random.Range(0f, 1f);\r\n                    float normalizedZ
    = Random.Range(0f, 1f);\r\n\r\n                    Vector2 point = new Vector2(normalizedX,
    normalizedZ);\r\n\r\n                    // \u5224\u65AD\u70B9\u662F\u5426\u5728\u5706\u5F62\u533A\u57DF\u5185\r\n                   
    if (IsPointInCircle(point, center, radius))\r\n                    {\r\n                       
    // \u83B7\u53D6\u8BE5\u70B9\u7684\u6D77\u62D4\r\n                        float
    terrainHeight = terrainData.GetHeight(\r\n                            Mathf.FloorToInt(normalizedX
    * terrainData.heightmapResolution),\r\n                            Mathf.FloorToInt(normalizedZ
    * terrainData.heightmapResolution)\r\n                        );\r\n\r\n                       
    // \u83B7\u53D6\u6D77\u62D4\u6BD4\u4F8B\r\n                        float normalizedY
    = terrainHeight / terrainData.size.y;\r\n\r\n                        // \u5224\u65AD\u6D77\u62D4\u662F\u5426\u5728\u6307\u5B9A\u8303\u56F4\u5185\r\n                       
    if (normalizedY >= plant.elevationRange.x && normalizedY <= plant.elevationRange.y)\r\n                       
    {\r\n                            // \u83B7\u53D6\u8BE5\u70B9\u7684\u5761\u5EA6\r\n                           
    float slope = CalculateSlope(terrainData, Mathf.FloorToInt(normalizedX * terrainData.heightmapResolution),
    Mathf.FloorToInt(normalizedZ * terrainData.heightmapResolution));\r\n\r\n                           
    // \u68C0\u67E5\u8BE5\u70B9\u7684\u5761\u5EA6\u662F\u5426\u5728\u6307\u5B9A\u8303\u56F4\u5185\r\n                           
    if (slope >= plant.minSlope && slope <= plant.maxSlope)\r\n                           
    {\r\n                                // \u5982\u679C\u7B26\u5408\u5761\u5EA6\u8981\u6C42\uFF0C\u751F\u6210\u690D\u7269\r\n                               
    float widthScale = Random.Range(plant.widthScaleRange.x, plant.widthScaleRange.y);\r\n                               
    float heightScale = Random.Range(plant.heightScaleRange.x, plant.heightScaleRange.y);\r\n\r\n                               
    TreeInstance treeInstance = new TreeInstance\r\n                               
    {\r\n                                    position = new Vector3(normalizedX,
    normalizedY, normalizedZ),\r\n                                    prototypeIndex
    = p,\r\n                                    widthScale = widthScale,\r\n                                   
    heightScale = heightScale,\r\n                                    color = Color.white,\r\n                                   
    lightmapColor = Color.white\r\n                                };\r\n\r\n                               
    treeInstances.Add(treeInstance);\r\n                            }\r\n                       
    }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n       
    terrainData.treeInstances = treeInstances.ToArray();\r\n    }\r\n\r\n\r\n   
    \r\n    private void SetProto(TerrainData terrainData)\r\n    {\r\n        DetailPrototype
    grassPrototype = new DetailPrototype\r\n        {\r\n            prototypeTexture
    = Resources.Load<Texture2D>(\"Textures/GrassBillboard\"),\r\n            minHeight
    = 1.0f,\r\n            maxHeight = 2.0f,\r\n            minWidth = 1.0f,\r\n           
    maxWidth = 2.0f\r\n        };\r\n\r\n        terrainData.detailPrototypes = new
    DetailPrototype[] { grassPrototype };\r\n\r\n        int resolution = terrainData.detailResolution;\r\n       
    int[,] details = new int[resolution, resolution];\r\n        for (int y = 0;
    y < resolution; y++)\r\n        {\r\n            for (int x = 0; x < resolution;
    x++)\r\n            {\r\n                details[y, x] = Random.Range(0, terrainDataSo.grassDensity);
    // \u6839\u636E\u8349\u5BC6\u5EA6\u8BBE\u7F6E\r\n            }\r\n        }\r\n\r\n       
    terrainData.SetDetailLayer(0, 0, 0, details);\r\n    }\r\n    \r\n    private
    void CreateTerrainObject(TerrainData terrainData)\r\n    {\r\n        // \u521B\u5EFA
    Terrain \u5BF9\u8C61\r\n        GameObject terrainObject = Terrain.CreateTerrainGameObject(terrainData);\r\n       
    terrainObject.transform.position = Vector3.zero;\r\n        // \u786E\u4FDD\u7ED8\u5236\u6811\u6728\r\n       
    Terrain terrain = terrainObject.GetComponent<Terrain>();\r\n        terrain.drawTreesAndFoliage
    = true;\r\n    }\r\n    \r\n    private void SetLight(Terrain terrainObject)\r\n   
    {\r\n        // \u5149\u7167\u548C\u5176\u4ED6\u53C2\u6570\r\n        terrainObject.materialTemplate
    = new Material(Shader.Find(\"Universal Render Pipeline/Terrain/Lit\"));\r\n   
    }\r\n\r\n    private void GenerateTerrain()\r\n    {\r\n        if (terrainDataSo
    == null)\r\n        {\r\n            Debug.LogError(\"TerrainDataSo is not assigned!\");\r\n           
    return;\r\n        }\r\n        \r\n        // \u521B\u5EFA TerrainData\r\n       
    TerrainData terrainData = new TerrainData();\r\n\r\n        SetResolution(terrainData);\r\n       
    \r\n        SetHeight(terrainData);\r\n\r\n        SetLayers(terrainData);\r\n       
    \r\n        SetPlants(terrainData);\r\n\r\n        SetProto(terrainData);\r\n\r\n       
    CreateTerrainObject(terrainData);\r\n\r\n        //SetLight(terrainObject.GetComponent<Terrain>());\r\n   
    }\r\n    \r\n    private bool IsPointInCircle(Vector2 point, Vector2 center,
    float radius)\r\n    {\r\n        // \u8BA1\u7B97\u70B9\u4E0E\u5706\u5FC3\u7684\u8DDD\u79BB\r\n       
    float distance = Vector2.Distance(point, center);\r\n        return distance
    <= radius;\r\n    }\r\n\r\n}\r\n\u201D\u3001\r\n\u201C\r\nusing System.Collections.Generic;\r\nusing
    UnityEngine;\r\n\r\n[CreateAssetMenu]\r\npublic class TerrainDataSo : ScriptableObject\r\n{\r\n   
    [Header(\"\u5206\u8FA8\u7387\u8BBE\u7F6E\")]\r\n    [Tooltip(\"\u9AD8\u5EA6\u56FE\u5206\u8FA8\u7387\")]
    public int heightmapResolution = 513;\r\n    [Tooltip(\"\u6DF7\u5408\u8D34\u56FE\u5206\u8FA8\u7387\")]
    public int alphamapResolution = 512;\r\n    [Tooltip(\"\u7EC6\u8282\u56FE\u5757\u7684\u5206\u8FA8\u7387\")]
    public int detailResolution = 16;\r\n    [Tooltip(\"\u7EC6\u8282\u56FE\u5757\u7684\u5206\u8FA8\u7387\")]
    public Vector3 dataSize = new Vector3(1000, 200, 1000);\r\n\r\n    [Header(\"\u9AD8\u5EA6\u56FE/\u5730\u5F62\u8BBE\u7F6E\")]\r\n   
    public List<NoiseLayer> noiseLayers = new List<NoiseLayer>();\r\n    \r\n   
    [Header(\"\u5730\u5F62\u7EB9\u7406\u53C2\u6570\")]\r\n    public TerrainTextureLayer[]
    textureLayers;\r\n    \r\n    [Header(\"\u690D\u7269\u53C2\u6570\")]\r\n    public
    Plant[] plants;\r\n    [Tooltip(\"\u8349\u5BC6\u5EA6\")] public int grassDensity
    = 5;\r\n\r\n}\r\n\r\n[System.Serializable]\r\npublic class Plant\r\n{\r\n   
    public GameObject prefab;         // \u690D\u7269\u9884\u8BBE\r\n    public Vector3[]
    area;            // \u591A\u4E2A\u5706\u5F62\u533A\u57DF\uFF0C\u4F7F\u7528\u591A\u4E2AVector3\u8868\u793A\uFF08x,
    y\u4E3A\u5706\u5FC3\u5750\u6807\uFF0Cz\u4E3A\u534A\u5F84\uFF09\r\n    public
    Vector2 elevationRange;    // \u6D77\u62D4\u6BD4\u4F8B\u8303\u56F4\uFF08\u6700\u5C0F\u6BD4\u4F8B\u5230\u6700\u5927\u6BD4\u4F8B\uFF09\r\n   
    public float density;               // \u6BCF\u5355\u4F4D\u9762\u79EF\u7684\u690D\u7269\u5BC6\u5EA6\r\n   
    public Vector2 widthScaleRange;   // \u5BBD\u5EA6\u7F29\u653E\u6BD4\u4F8B\u8303\u56F4\r\n   
    public Vector2 heightScaleRange;  // \u9AD8\u5EA6\u7F29\u653E\u6BD4\u4F8B\u8303\u56F4\r\n   
    public float minSlope;\r\n    public float maxSlope;\r\n}\r\n\r\n[System.Serializable]\r\npublic
    class TerrainTextureLayer\r\n{\r\n    public Texture2D diffuseTexture;\r\n   
    public Vector2 tileSize;\r\n    public float minHeight;\r\n    public float maxHeight;\r\n   
    public float minSlope;\r\n    public float maxSlope;\r\n    public bool useNoise;\r\n   
    public float noiseScale;\r\n    public float minBlend;\r\n    public float maxBlend;\r\n}\r\n\r\n[System.Serializable]\r\npublic
    class NoiseLayer\r\n{\r\n    //public enum NoiseType { Perlin, Simplex, Voronoi
    }\r\n    public enum NoiseType { Perlin }\r\n    public bool enabled = true;\r\n   
    public NoiseType type;\r\n    public float scale = 1.0f;\r\n    public float
    persistence = 0.5f;\r\n    public float frequency = 1.0f;\r\n    public int octaves
    = 1;\r\n\r\n    public float Evaluate(float x, float y)\r\n    {\r\n        float
    noiseValue = 0f;\r\n        float amplitude = 1f;\r\n        float localFrequency
    = frequency;\r\n\r\n        for (int i = 0; i < octaves; i++)\r\n        {\r\n           
    switch (type)\r\n            {\r\n                case NoiseType.Perlin:\r\n                   
    noiseValue += Mathf.PerlinNoise(x * scale * localFrequency, y * scale * localFrequency)
    * amplitude;\r\n                    break;\r\n                //case NoiseType.Simplex:\r\n                   
    // Simplex noise implementation goes here\r\n                    break;\r\n               
    //case NoiseType.Voronoi:\r\n                    // Voronoi noise implementation
    goes here\r\n                    break;\r\n            }\r\n            amplitude
    *= persistence;\r\n            localFrequency *= 2;\r\n        }\r\n\r\n       
    return noiseValue;\r\n    }\r\n}\r\n\u201D\r\n"
  tips: "(\u4EE4\u724C\u6682\u65F6\u7981\u7528\uFF0C\u4F7F\u7528\u65F6\u6253\u5F00)"
  sendKey: 97
--- !u!1660057539 &9223372036854775807
SceneRoots:
  m_ObjectHideFlags: 0
  m_Roots:
  - {fileID: 515958038}
